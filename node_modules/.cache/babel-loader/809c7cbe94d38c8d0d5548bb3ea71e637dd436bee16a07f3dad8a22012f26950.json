{"ast":null,"code":"var _jsxFileName = \"/Users/adeshpadwal/Desktop/Web Development/React/React Course/textutils/Text-Utilities-by-using-React-JS/src/My Components/About.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function About() {\n  // const [myStyle, setMyStyle] = useState({\n  //   color: \"black\",\n  //   backgroundColor: \"white\"\n  // })\n\n  // // let full={\n  // //     height:'100%',\n  // //     width:'100%'\n  // // }\n\n  // const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\n\n  // const toggleStyle = () => {\n  //   if (myStyle.color === \"white\") {\n  //     setMyStyle({\n  //       color: \"black\",\n  //       backgroundColor: \"white\"\n  //     })\n  //     setBtnText(\"Enable Dark Mode\")\n  //   }\n  //   else {\n  //     setMyStyle({\n  //       color: \"white\",\n  //       backgroundColor: \"black\"\n  //     })\n  //     setBtnText(\"Enable Light Mode\")\n  //   }\n  // }\n  return (\n    /*#__PURE__*/\n    // <div style={myStyle} >\n    //   <div className=\"container my-3 mb-3\" style={myStyle}>\n    //     <h1>About Us</h1>\n    //     <div className=\"accordion\" id=\"accordionExample\">\n    //       <div className=\"accordion-item\">\n    //         <h2 className=\"accordion-header\" id=\"headingOne\" style={myStyle}>\n    //           <button\n    //             className=\"accordion-button\"\n    //             type=\"button\"\n    //             style={myStyle}\n    //             data-bs-toggle=\"collapse\"\n    //             data-bs-target=\"#collapseOne\"\n    //             aria-expanded=\"true\"\n    //             aria-controls=\"collapseOne\"\n    //           >\n    //             Accordion Item #1\n    //           </button>\n    //         </h2>\n    //         <div\n    //           style={myStyle}\n    //           id=\"collapseOne\"\n    //           className=\"accordion-collapse collapse show\"\n    //           aria-labelledby=\"headingOne\"\n    //           data-bs-parent=\"#accordionExample\"\n    //         >\n    //           <div className=\"accordion-body\" >\n    //             <strong>This is the first item's accordion body.</strong> It is\n    //             shown by default, until the collapse plugin adds the appropriate\n    //             classes that we use to style each element. These classes control\n    //             the overall appearance, as well as the showing and hiding via CSS\n    //             transitions. You can modify any of this with custom CSS or\n    //             overriding our default variables. It's also worth noting that just\n    //             about any HTML can go within the <code>.accordion-body</code>,\n    //             though the transition does limit overflow.\n    //           </div>\n    //         </div>\n    //       </div>\n    //       <div className=\"accordion-item\" style={myStyle}>\n    //         <h2 className=\"accordion-header\" id=\"headingTwo\" >\n    //           <button\n    //             style={myStyle}\n    //             className=\"accordion-button collapsed\"\n    //             type=\"button\"\n    //             data-bs-toggle=\"collapse\"\n    //             data-bs-target=\"#collapseTwo\"\n    //             aria-expanded=\"false\"\n    //             aria-controls=\"collapseTwo\"\n    //           >\n    //             Accordion Item #2\n    //           </button>\n    //         </h2>\n    //         <div\n    //           id=\"collapseTwo\"\n    //           className=\"accordion-collapse collapse\"\n    //           aria-labelledby=\"headingTwo\"\n    //           data-bs-parent=\"#accordionExample\"\n    //         >\n    //           <div className=\"accordion-body\">\n    //             <strong>This is the second item's accordion body.</strong> It is\n    //             hidden by default, until the collapse plugin adds the appropriate\n    //             classes that we use to style each element. These classes control\n    //             the overall appearance, as well as the showing and hiding via CSS\n    //             transitions. You can modify any of this with custom CSS or\n    //             overriding our default variables. It's also worth noting that just\n    //             about any HTML can go within the <code>.accordion-body</code>,\n    //             though the transition does limit overflow.\n    //           </div>\n    //         </div>\n    //       </div>\n    //       <div className=\"accordion-item\" style={myStyle}>\n    //         <h2 className=\"accordion-header\" id=\"headingThree\">\n    //           <button\n    //             style={myStyle}\n    //             className=\"accordion-button collapsed\"\n    //             type=\"button\"\n    //             data-bs-toggle=\"collapse\"\n    //             data-bs-target=\"#collapseThree\"\n    //             aria-expanded=\"false\"\n    //             aria-controls=\"collapseThree\"\n    //           >\n    //             Accordion Item #3\n    //           </button>\n    //         </h2>\n    //         <div\n    //           id=\"collapseThree\"\n    //           className=\"accordion-collapse collapse\"\n    //           aria-labelledby=\"headingThree\"\n    //           data-bs-parent=\"#accordionExample\"\n    //         >\n    //           <div className=\"accordion-body\">\n    //             <strong>This is the third item's accordion body.</strong> It is\n    //             hidden by default, until the collapse plugin adds the appropriate\n    //             classes that we use to style each element. These classes control\n    //             the overall appearance, as well as the showing and hiding via CSS\n    //             transitions. You can modify any of this with custom CSS or\n    //             overriding our default variables. It's also worth noting that just\n    //             about any HTML can go within the <code>.accordion-body</code>,\n    //             though the transition does limit overflow.\n    //           </div>\n    //         </div>\n    //       </div>\n    //       <div className=\"container my-3\">\n    //         <button className=\"btn btn-primary\" onClick={toggleStyle}>{btnText}</button>\n    //       </div>\n    //     </div>\n    //   </div>\n    // </div>\n    _jsxDEV(\"p\", {\n      children: \"           About page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }, this)\n  );\n}\n_c = About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","useState","About"],"sources":["/Users/adeshpadwal/Desktop/Web Development/React/React Course/textutils/Text-Utilities-by-using-React-JS/src/My Components/About.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nexport default function About() {\n\n\n  // const [myStyle, setMyStyle] = useState({\n  //   color: \"black\",\n  //   backgroundColor: \"white\"\n  // })\n\n  // // let full={\n  // //     height:'100%',\n  // //     width:'100%'\n  // // }\n\n  // const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\n\n  // const toggleStyle = () => {\n  //   if (myStyle.color === \"white\") {\n  //     setMyStyle({\n  //       color: \"black\",\n  //       backgroundColor: \"white\"\n  //     })\n  //     setBtnText(\"Enable Dark Mode\")\n  //   }\n  //   else {\n  //     setMyStyle({\n  //       color: \"white\",\n  //       backgroundColor: \"black\"\n  //     })\n  //     setBtnText(\"Enable Light Mode\")\n  //   }\n  // }\n  return (\n    // <div style={myStyle} >\n    //   <div className=\"container my-3 mb-3\" style={myStyle}>\n    //     <h1>About Us</h1>\n    //     <div className=\"accordion\" id=\"accordionExample\">\n    //       <div className=\"accordion-item\">\n    //         <h2 className=\"accordion-header\" id=\"headingOne\" style={myStyle}>\n    //           <button\n    //             className=\"accordion-button\"\n    //             type=\"button\"\n    //             style={myStyle}\n    //             data-bs-toggle=\"collapse\"\n    //             data-bs-target=\"#collapseOne\"\n    //             aria-expanded=\"true\"\n    //             aria-controls=\"collapseOne\"\n    //           >\n    //             Accordion Item #1\n    //           </button>\n    //         </h2>\n    //         <div\n    //           style={myStyle}\n    //           id=\"collapseOne\"\n    //           className=\"accordion-collapse collapse show\"\n    //           aria-labelledby=\"headingOne\"\n    //           data-bs-parent=\"#accordionExample\"\n    //         >\n    //           <div className=\"accordion-body\" >\n\n    //             <strong>This is the first item's accordion body.</strong> It is\n    //             shown by default, until the collapse plugin adds the appropriate\n    //             classes that we use to style each element. These classes control\n    //             the overall appearance, as well as the showing and hiding via CSS\n    //             transitions. You can modify any of this with custom CSS or\n    //             overriding our default variables. It's also worth noting that just\n    //             about any HTML can go within the <code>.accordion-body</code>,\n    //             though the transition does limit overflow.\n    //           </div>\n    //         </div>\n    //       </div>\n    //       <div className=\"accordion-item\" style={myStyle}>\n    //         <h2 className=\"accordion-header\" id=\"headingTwo\" >\n    //           <button\n    //             style={myStyle}\n    //             className=\"accordion-button collapsed\"\n    //             type=\"button\"\n    //             data-bs-toggle=\"collapse\"\n    //             data-bs-target=\"#collapseTwo\"\n    //             aria-expanded=\"false\"\n    //             aria-controls=\"collapseTwo\"\n    //           >\n    //             Accordion Item #2\n    //           </button>\n    //         </h2>\n    //         <div\n    //           id=\"collapseTwo\"\n    //           className=\"accordion-collapse collapse\"\n    //           aria-labelledby=\"headingTwo\"\n    //           data-bs-parent=\"#accordionExample\"\n    //         >\n    //           <div className=\"accordion-body\">\n    //             <strong>This is the second item's accordion body.</strong> It is\n    //             hidden by default, until the collapse plugin adds the appropriate\n    //             classes that we use to style each element. These classes control\n    //             the overall appearance, as well as the showing and hiding via CSS\n    //             transitions. You can modify any of this with custom CSS or\n    //             overriding our default variables. It's also worth noting that just\n    //             about any HTML can go within the <code>.accordion-body</code>,\n    //             though the transition does limit overflow.\n    //           </div>\n    //         </div>\n    //       </div>\n    //       <div className=\"accordion-item\" style={myStyle}>\n    //         <h2 className=\"accordion-header\" id=\"headingThree\">\n    //           <button\n    //             style={myStyle}\n    //             className=\"accordion-button collapsed\"\n    //             type=\"button\"\n    //             data-bs-toggle=\"collapse\"\n    //             data-bs-target=\"#collapseThree\"\n    //             aria-expanded=\"false\"\n    //             aria-controls=\"collapseThree\"\n    //           >\n    //             Accordion Item #3\n    //           </button>\n    //         </h2>\n    //         <div\n    //           id=\"collapseThree\"\n    //           className=\"accordion-collapse collapse\"\n    //           aria-labelledby=\"headingThree\"\n    //           data-bs-parent=\"#accordionExample\"\n    //         >\n    //           <div className=\"accordion-body\">\n    //             <strong>This is the third item's accordion body.</strong> It is\n    //             hidden by default, until the collapse plugin adds the appropriate\n    //             classes that we use to style each element. These classes control\n    //             the overall appearance, as well as the showing and hiding via CSS\n    //             transitions. You can modify any of this with custom CSS or\n    //             overriding our default variables. It's also worth noting that just\n    //             about any HTML can go within the <code>.accordion-body</code>,\n    //             though the transition does limit overflow.\n    //           </div>\n    //         </div>\n    //       </div>\n    //       <div className=\"container my-3\">\n    //         <button className=\"btn btn-primary\" onClick={toggleStyle}>{btnText}</button>\n    //       </div>\n\n    //     </div>\n    //   </div>\n    // </div>\n\n    <p>           About page</p>\n\n  );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,eAAe,SAASC,KAAK,GAAG;EAG9B;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;MAAA,UAAG;IAAqB;MAAA;MAAA;MAAA;IAAA;EAAI;AAGhC;AAAC,KAjJuBA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}